The CelebrityGame class serves as the main controller for interacting with Celebrity objects. It keeps track of the celebrity list, evaluates player guesses, and provides access to the current celebrity’s name and clue. Additionally, it ensures valid input and oversees the game’s progression.  

Outside of CelebrityGame, the rest of the graphical user interface (GUI) does not need to understand the inner workings of the Celebrity class. Instead, the GUI simply requests and displays clues and answers without concerning itself with how the data is stored or processed. This separation between game logic and UI makes the program more structured, modular, and easier to manage.  

This project adheres to black-box programming, where different components interact without needing to understand each other’s internal mechanics. For example, the GUI communicates with CelebrityGame without knowing how celebrities are stored or how guesses are verified. Likewise, CelebrityGame uses an ArrayList without needing to understand its internal structure or memory allocation. Examples of abstraction in this project include Java Swing, which provides GUI components like `JFrame` and `JPanel` without requiring knowledge of their rendering processes. The `ArrayList` class is used to store celebrities, but its internal memory management remains hidden. The CelebrityFrame class handles the GUI, but its implementation details are unnecessary when working with CelebrityGame. This design approach enhances modularity, allowing different parts of the program to function independently while still working together seamlessly.
